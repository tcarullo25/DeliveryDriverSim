Week of 10/9
1. DONE: do threshold instead of quadrant
2. DONE: add non productive time which is idle time + time from driver loc to order pickup
3. DONE: pickup time - the timestep the restaurant will have it ready PREDETERMINED
          dropoff time - delivery by time PREDETERMINED (maybe measured by reputation of restaurant?)
4. DONE: more flexible rate based on duration (meet a certain wage)
5. DONE: reputation score for drivers based off meeting the pickup time & dropoff time (this should break ties into which driver gets the current order)
   DONE:       add reliability correlating with reputation score (random seed)
   NOTE: because most people are late very often, everyone's reputation will be low
   
Week of 10/23
1. DONE: send out order to top n drivers, figure out which driver will take it, if multiple, then take the best one
  driver policies: accept all (greedy), some driver calculation
2. DONE: company policies
3. DONE: (display test cases) draw graph of nodes to see where pickups and dropoffs are 

Week of 10/30
1. DONE: change reliability factor function to have preset behavior factor (e.g. (1.1, 1.0, .9) + w2 * random.uniform(-1, 1))
2. DONE: change currloctorderpicup and totaltime to behavior factored times in rep policy
3. DONE: dont penalize driver twice for being late if elapsed time <= deliver time
4. DONE: display vehicles around order (that are not busy), order route, & vehicle chosen
5. DONE: in updatereputation keep track of number of consecutive orders on time previously
6. #TODO: figure out a proper way to add and subtract from reputation now that not many people are late for deliveries

Week of 11/6:
1. DONE: showing whether a driver accepted or rejected
2. DONE: driver should be able to have intermediate desinations each inflated/deflated by their behavior factor and warp to each intermediate dest
3. #TODO: restaurant clustering and maybe start implementing policy for drivers to head back to a cluster
4. #TODO: run baselines for policies (after we do intermediate dests and clustering)
5. NOTE: when driver decides about an order, the driver reliability factor will differ then as opposed to when we assign the driver and re compute the reliability factor
   # because of randomness but i think this is ok?

OTHER NOTES:
#TODO: make tests look nicer and post the parameters of each test in the console output
#TODO: adding order while have a current order
#TODO: work on finding a good balance/equilibrium between # drivers and order spawn rate
# if we start to access a driver's currloc to order duration and totaltime a lot thru getOrderDuration, store these values

# not currently reflecting driver distance as they proceed in route

# give drivers policies & name driver's by their trait to better understand data

# is there a standard python made just for imports?

 
